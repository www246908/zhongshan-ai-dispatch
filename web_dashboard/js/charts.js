// ÂúñË°®ÁÆ°ÁêÜÈ°û
class ZhongshanChartManager {
    constructor() {
        this.waterLevelChart = null;
        this.chartData = {
            historical: [],
            predictions: [],
            timestamps: []
        };
        this.chartPeriod = '1h';
        this.updateInterval = null;
    }

    // ÂàùÂßãÂåñÊâÄÊúâÂúñË°®
    init() {
        this.initWaterLevelChart();
        this.generateHistoricalData();
        this.startRealTimeUpdates();
    }

    // ÂàùÂßãÂåñÊ∞¥‰ΩçË∂®Âã¢Âúñ
    initWaterLevelChart() {
        const ctx = document.getElementById('waterLevelChart');
        if (!ctx) return;

        // Âü∫ÊñºÊÇ®ÁöÑÊ∞¥‰ΩçË∂®Âã¢ÂúñË®≠Ë®à
        this.waterLevelChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'Ê≠∑Âè≤Ê∞¥‰Ωç',
                        data: [],
                        borderColor: '#0ea5e9',
                        backgroundColor: 'rgba(14, 165, 233, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointRadius: 4,
                        pointHoverRadius: 6,
                        pointBackgroundColor: '#0ea5e9',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    },
                    {
                        label: 'AIÈ†êÊ∏¨ (88.24%Ê∫ñÁ¢∫Â∫¶)',
                        data: [],
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        borderWidth: 3,
                        borderDash: [8, 4],
                        fill: false,
                        tension: 0.3,
                        pointRadius: 8,
                        pointHoverRadius: 10,
                        pointStyle: 'rectRot',
                        pointBackgroundColor: '#ef4444',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2
                    },
                    {
                        label: 'Âç±Èö™Á∑ö (1.4m)',
                        data: [],
                        borderColor: '#ef4444',
                        backgroundColor: 'rgba(239, 68, 68, 0.05)',
                        borderWidth: 2,
                        borderDash: [2, 2],
                        fill: false,
                        pointRadius: 0,
                        pointHoverRadius: 0
                    },
                    {
                        label: 'Ë≠¶ÊàíÁ∑ö (1.3m)',
                        data: [],
                        borderColor: '#f97316',
                        backgroundColor: 'rgba(249, 115, 22, 0.05)',
                        borderWidth: 2,
                        borderDash: [2, 2],
                        fill: false,
                        pointRadius: 0,
                        pointHoverRadius: 0
                    },
                    {
                        label: 'Ê≥®ÊÑèÁ∑ö (1.2m)',
                        data: [],
                        borderColor: '#f59e0b',
                        backgroundColor: 'rgba(245, 158, 11, 0.05)',
                        borderWidth: 2,
                        borderDash: [2, 2],
                        fill: false,
                        pointRadius: 0,
                        pointHoverRadius: 0
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            color: '#e2e8f0',
                            font: {
                                size: 12,
                                family: 'Inter'
                            },
                            usePointStyle: true,
                            padding: 20
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(15, 23, 42, 0.9)',
                        titleColor: '#e2e8f0',
                        bodyColor: '#cbd5e1',
                        borderColor: 'rgba(255, 255, 255, 0.1)',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: true,
                        callbacks: {
                            title: function(context) {
                                return 'ÊôÇÈñì: ' + context[0].label;
                            },
                            label: function(context) {
                                const value = context.parsed.y;
                                const label = context.dataset.label;
                                
                                if (label.includes('AIÈ†êÊ∏¨')) {
                                    return `${label}: ${value.toFixed(2)}m (‰ø°ÂøÉÂ∫¶: 88.24%)`;
                                } else if (label.includes('Á∑ö')) {
                                    return `${label}: ${value.toFixed(1)}m`;
                                } else {
                                    return `${label}: ${value.toFixed(2)}m`;
                                }
                            },
                            afterBody: function(context) {
                                const value = context[0].parsed.y;
                                let riskLevel = '';
                                
                                if (value >= 1.4) {
                                    riskLevel = 'È¢®Èö™Á≠âÁ¥ö: Âç±Èö™ üî¥';
                                } else if (value >= 1.3) {
                                    riskLevel = 'È¢®Èö™Á≠âÁ¥ö: Ë≠¶Êàí üü†';
                                } else if (value >= 1.2) {
                                    riskLevel = 'È¢®Èö™Á≠âÁ¥ö: Ê≥®ÊÑè üü°';
                                } else {
                                    riskLevel = 'È¢®Èö™Á≠âÁ¥ö: Ê≠£Â∏∏ üü¢';
                                }
                                
                                return riskLevel;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        type: 'category',
                        ticks: {
                            color: '#94a3b8',
                            font: {
                                size: 11,
                                family: 'Inter'
                            },
                            maxTicksLimit: 12
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            lineWidth: 1
                        },
                        border: {
                            color: 'rgba(255, 255, 255, 0.2)'
                        }
                    },
                    y: {
                        beginAtZero: false,
                        min: 0.5,
                        max: 2.0,
                        ticks: {
                            color: '#94a3b8',
                            font: {
                                size: 11,
                                family: 'Inter'
                            },
                            callback: function(value) {
                                return value.toFixed(1) + 'm';
                            },
                            stepSize: 0.1
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)',
                            lineWidth: 1
                        },
                        border: {
                            color: 'rgba(255, 255, 255, 0.2)'
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeInOutQuart'
                },
                hover: {
                    animationDuration: 200
                }
            }
        });
    }

    // ÁîüÊàêÊ≠∑Âè≤Ë≥áÊñôÔºàÂü∫ÊñºÊÇ®ÁöÑË∂®Âã¢ÂúñÔºâ
    generateHistoricalData() {
        const now = new Date();
        const dataPoints = this.getDataPointsForPeriod(this.chartPeriod);
        
        this.chartData.timestamps = [];
        this.chartData.historical = [];
        
        // Âü∫ÊñºÊÇ®ÂúñÁâá‰∏≠ÁöÑÊ∞¥‰ΩçË∂®Âã¢Ê®°Âºè
        const basePattern = [
            1.05, 1.18, 1.35, 1.48, 1.52, 1.35, 1.25, 1.02, 
            0.95, 0.88, 0.85, 0.82, 0.78, 0.75, 0.89, 0.95, 
            1.05, 1.15, 1.18, 1.16, 1.12, 1.08, 1.05, 1.02
        ];
        
        for (let i = 0; i < dataPoints; i++) {
            const timeOffset = this.getTimeOffset(i, dataPoints);
            const time = new Date(now.getTime() - timeOffset);
            
            // ‰ΩøÁî®Âü∫Á§éÊ®°Âºè‰∏¶Ê∑ªÂä†‰∏Ä‰∫õËÆäÂåñ
            const patternIndex = i % basePattern.length;
            const baseValue = basePattern[patternIndex];
            const variation = (Math.random() - 0.5) * 0.1;
            const waterLevel = Math.max(0.5, Math.min(2.0, baseValue + variation));
            
            this.chartData.timestamps.unshift(this.formatTime(time));
            this.chartData.historical.unshift(waterLevel);
        }
        
        this.updateChartData();
    }

    // Ê†πÊìöÈÄ±ÊúüÁç≤ÂèñË≥áÊñôÈªûÊï∏Èáè
    getDataPointsForPeriod(period) {
        switch(period) {
            case '1h': return 24; // ÊØè2.5ÂàÜÈêò‰∏ÄÂÄãÈªû
            case '6h': return 36; // ÊØè10ÂàÜÈêò‰∏ÄÂÄãÈªû
            case '24h': return 48; // ÊØè30ÂàÜÈêò‰∏ÄÂÄãÈªû
            case '7d': return 168; // ÊØèÂ∞èÊôÇ‰∏ÄÂÄãÈªû
            default: return 24;
        }
    }

    // Áç≤ÂèñÊôÇÈñìÂÅèÁßª
    getTimeOffset(index, total) {
        switch(this.chartPeriod) {
            case '1h': return index * 2.5 * 60 * 1000; // 2.5ÂàÜÈêò
            case '6h': return index * 10 * 60 * 1000; // 10ÂàÜÈêò
            case '24h': return index * 30 * 60 * 1000; // 30ÂàÜÈêò
            case '7d': return index * 60 * 60 * 1000; // 1Â∞èÊôÇ
            default: return index * 2.5 * 60 * 1000;
        }
    }

    // Ê†ºÂºèÂåñÊôÇÈñìÈ°ØÁ§∫
    formatTime(date) {
        switch(this.chartPeriod) {
            case '1h':
            case '6h':
                return date.toLocaleTimeString('zh-TW', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            case '24h':
                return date.toLocaleTimeString('zh-TW', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            case '7d':
                return date.toLocaleDateString('zh-TW', { 
                    month: '2-digit', 
                    day: '2-digit' 
                });
            default:
                return date.toLocaleTimeString('zh-TW', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
        }
    }

    // Êõ¥Êñ∞ÂúñË°®Ë≥áÊñô
    updateChartData() {
        if (!this.waterLevelChart) return;

        const chart = this.waterLevelChart;
        
        // Êõ¥Êñ∞Ê®ôÁ±§
        chart.data.labels = [...this.chartData.timestamps];
        
        // Êõ¥Êñ∞Ê≠∑Âè≤Ê∞¥‰ΩçË≥áÊñô
        chart.data.datasets[0].data = [...this.chartData.historical];
        
        // ÁîüÊàêAIÈ†êÊ∏¨Ë≥áÊñôÔºàÊúÄÂæå3ÂÄãÈªûÔºâ
        const lastPoints = this.chartData.historical.slice(-3);
        const predictions = this.generateAIPredictions(lastPoints);
        chart.data.datasets[1].data = [...Array(this.chartData.historical.length - 3).fill(null), ...predictions];
        
        // Êõ¥Êñ∞Ë≠¶ÊàíÁ∑öË≥áÊñô
        const warningLines = [
            { level: 1.4, datasetIndex: 2 }, // Âç±Èö™Á∑ö
            { level: 1.3, datasetIndex: 3 }, // Ë≠¶ÊàíÁ∑ö
            { level: 1.2, datasetIndex: 4 }  // Ê≥®ÊÑèÁ∑ö
        ];
        
        warningLines.forEach(line => {
            chart.data.datasets[line.datasetIndex].data = 
                new Array(this.chartData.timestamps.length).fill(line.level);
        });
        
        chart.update('none');
    }

    // ÁîüÊàêAIÈ†êÊ∏¨Ë≥áÊñô
    generateAIPredictions(lastPoints) {
        if (lastPoints.length < 3) return [];
        
        const predictions = [];
        let currentValue = lastPoints[lastPoints.length - 1];
        
        // Âü∫ÊñºË∂®Âã¢ÂíåAIÈÇèËºØÁîüÊàêÈ†êÊ∏¨
        const trend = (lastPoints[2] - lastPoints[0]) / 2;
        const currentRainfall = parseInt(document.getElementById('rainfallSlider')?.value || 25);
        
        for (let i = 0; i < 3; i++) {
            // AIÈ†êÊ∏¨ÈÇèËºØÔºàÂü∫ÊñºÊÇ®ÁöÑ88.24%Ê∫ñÁ¢∫Â∫¶Ê®°ÂûãÔºâ
            let prediction = currentValue + trend * 0.5;
            
            // ËÄÉÊÖÆÈôçÈõ®ÂΩ±Èüø
            if (currentRainfall > 30) {
                prediction += 0.05;
            } else if (currentRainfall > 10) {
                prediction += 0.02;
            }
            
            // Ê∑ªÂä†‰∏Ä‰∫õ‰∏çÁ¢∫ÂÆöÊÄß
            const uncertainty = (Math.random() - 0.5) * 0.08;
            prediction += uncertainty;
            
            // Á¢∫‰øùÂú®ÂêàÁêÜÁØÑÂúçÂÖß
            prediction = Math.max(0.5, Math.min(2.0, prediction));
            
            predictions.push(prediction);
            currentValue = prediction;
        }
        
        return predictions;
    }

    // Êõ¥Êñ∞ÂúñË°®ÈÄ±Êúü
    updatePeriod(newPeriod) {
        this.chartPeriod = newPeriod;
        this.generateHistoricalData();
    }

    // Ê∑ªÂä†Êñ∞ÁöÑÂç≥ÊôÇË≥áÊñôÈªû
    addRealTimeData(waterLevel) {
        const now = new Date();
        const timeLabel = this.formatTime(now);
        
        // Ê∑ªÂä†Êñ∞Ë≥áÊñôÈªû
        this.chartData.timestamps.push(timeLabel);
        this.chartData.historical.push(waterLevel);
        
        // ‰øùÊåÅË≥áÊñôÈªûÊï∏Èáè
        const maxPoints = this.getDataPointsForPeriod(this.chartPeriod);
        if (this.chartData.timestamps.length > maxPoints) {
            this.chartData.timestamps.shift();
            this.chartData.historical.shift();
        }
        
        this.updateChartData();
    }

    // ÈñãÂßãÂç≥ÊôÇÊõ¥Êñ∞
    startRealTimeUpdates() {
        // ÊØè30ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°ÂúñË°®
        this.updateInterval = setInterval(() => {
            const currentLevel = parseFloat(document.getElementById('waterSlider')?.value || 1.15);
            this.addRealTimeData(currentLevel);
        }, 30000);
    }

    // ÂÅúÊ≠¢Âç≥ÊôÇÊõ¥Êñ∞
    stopRealTimeUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    // ÂåØÂá∫ÂúñË°®Ë≥áÊñô
    exportChartData() {
        const exportData = {
            timestamp: new Date().toISOString(),
            period: this.chartPeriod,
            data: this.chartData.timestamps.map((time, index) => ({
                time: time,
                waterLevel: this.chartData.historical[index],
                riskLevel: this.getRiskLevel(this.chartData.historical[index])
            })),
            aiModel: {
                accuracy: 88.24,
                type: 'LSTM',
                features: 27,
                trainingFiles: 238
            },
            station: {
                name: '‰∏≠Â±±ÊäΩÊ∞¥Á´ô',
                location: '‰∏≠Â±±ÂçÄÊøüÊ±üË°ó97Ëôü',
                totalCapacity: '63 C.M.S'
            }
        };
        
        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `zhongshan_water_level_${new Date().toISOString().slice(0, 10)}.json`;
        link.click();
    }

    // Áç≤ÂèñÈ¢®Èö™Á≠âÁ¥ö
    getRiskLevel(waterLevel) {
        if (waterLevel >= 1.4) return 'Âç±Èö™';
        if (waterLevel >= 1.3) return 'Ë≠¶Êàí';
        if (waterLevel >= 1.2) return 'Ê≥®ÊÑè';
        return 'Ê≠£Â∏∏';
    }

    // Èä∑ÊØÄÂúñË°®
    destroy() {
        this.stopRealTimeUpdates();
        if (this.waterLevelChart) {
            this.waterLevelChart.destroy();
            this.waterLevelChart = null;
        }
    }
}

// ÂÖ®ÂüüÂúñË°®ÁÆ°ÁêÜÂô®
const chartManager = new ZhongshanChartManager();

// ÂåØÂá∫‰æõÂÖ∂‰ªñÊ®°ÁµÑ‰ΩøÁî®
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ZhongshanChartManager, chartManager };
}
